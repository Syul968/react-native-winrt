#
jobs:
  - job: E2ETest
    displayName: E2E Test
    strategy:
      matrix:
        x64:
          BuildPlatform: x64

    variables:
      - template: ../variables/vs2019.yml

    pool:
      vmImage: $(VmImage)

    timeoutInMinutes: 60 # how long to run the job before automatically cancelling
    cancelTimeoutInMinutes: 5 # how much time to give 'run always even if cancelled tasks' before killing them

    steps:
      - checkout: self
        clean: true
        submodules: false
            
      - powershell: |
          Write-Host "##vso[task.setvariable variable=BuildLogDirectory]$(Build.BinariesDirectory)\$(BuildPlatform)\BuildLogs"
        displayName: Set BuildLogDirectory

      - template: templates\prepare-env.yml

      - task: CmdLine@2
        displayName: Set LocalDumps
        inputs:
          script: $(Build.SourcesDirectory)\tests\scripts\SetupLocalDumps.cmd WinRTTests
          workingDirectory: $(Build.SourcesDirectory)

      - task: NuGetToolInstaller@1

      - task: CmdLine@2
        displayName: npm install
        inputs:
          script: "npm install"
          workingDirectory: $(Build.SourcesDirectory)

      - task: 333b11bd-d341-40d9-afcf-b32d5ce6f23b@2
        inputs:
          command: 'restore'
          restoreSolution: 'tests\WinRTTests\windows\WinRTTests.sln'
          feedsToUse: 'config'
          nugetConfigPath: ''
          
      - task: VSBuild@1
        displayName: 'Build solution WinRTTests.sln'
        inputs:
          solution: tests\WinRTTests\windows\WinRTTests.sln
          vsVersion: 'latest'
          platform: 'x64'
          configuration: 'Release'

      - task: PowerShell@2
        displayName: "Install WinRTTests App"
        inputs:
          targetType: "inline"
          script: "Add-AppxPackage $(Build.SourcesDirectory)\\tests\\WinRTTests\\windows\\AppPackages\\WinRTTests\\WinRTTests_1.0.0.0_x64_Test\\WinRTTests_1.0.0.0_x64.appx"
        condition: succeeded()

      - task: CmdLine@2
        displayName: run WinRTTests
        inputs:
          script: yarn run WinRTTests
          workingDirectory: tests/WinRTTests
        condition: succeeded()

      - task: CopyFiles@2
        displayName: Copy tree dump output files
        inputs:
          sourceFolder: $(UserProfile)\Documents\WinRTTests_cezq6h4ygq1hw!App
          targetFolder: $(Build.StagingDirectory)/WinRTTestsTreeDump
          contents: TreeDump\**
        condition: succeededOrFailed()

      - task: CopyFiles@2
        displayName: Copy tree dump screenshots
        inputs:
          sourceFolder: $(Build.SourcesDirectory)\tests\WinRTTests\errorShots
          targetFolder: $(Build.StagingDirectory)/WinRTTestsTreeDump
        condition: succeededOrFailed()

      - task: PowerShell@2
        displayName: "MSInfo32"
        inputs:
          targetType: "inline"
          script: "Start-Process msinfo32 -ArgumentList '/report $(Build.StagingDirectory)\\WinRTTestsTreeDump\\msinfo32.txt' -Wait"
        condition: failed()

      - task: PowerShell@2
        displayName: "Get-ShellScaling"
        inputs:
          targetType: "inline"
          script: ". $(Build.SourcesDirectory)\\tests\\scripts\\Get-ShellScaling.ps1 > $(Build.StagingDirectory)\\WinRTTestsTreeDump\\scaleFactor.txt"
        condition: failed()

      - task: CopyFiles@2
        displayName: Copy WinRTTests artifacts
        inputs:
          sourceFolder: $(Build.SourcesDirectory)/tests/WinRTTests/windows/WinRTTests
          targetFolder: $(Build.StagingDirectory)/WinRTTests
          contents: AppPackages\**
        condition: failed()

      - task: PublishPipelineArtifact@1
        displayName: "Publish Artifact:WinRTTests"
        inputs:
          artifactName: WinRTTests-$(System.JobAttempt)
          targetPath: $(Build.StagingDirectory)/WinRTTests
        condition: failed()

      - task: PublishPipelineArtifact@1
        displayName: "Publish Artifact:WinRTTestsTreeDump"
        inputs:
          artifactName: WinRTTestsTreeDump-$(System.JobAttempt)
          targetPath: $(Build.StagingDirectory)/WinRTTestsTreeDump
        condition: succeededOrFailed()

      - template: templates/upload-build-logs.yml
        parameters:
          buildLogDirectory: '$(BuildLogDirectory)'
          condition: succeededOrFailed()
